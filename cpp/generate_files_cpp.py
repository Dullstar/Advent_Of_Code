import os
import time
from main import MIN_YEAR, MAX_YEAR

FILE = os.path.basename(__file__)
HEADER = f"// Generated by {FILE} on {time.strftime('%a %b %d %Y')}\n\n"


def generate_run_day():
    exception_msg = \
        "\t// If the input is properly validated, this will be caught before it reaches this point,\n" \
        "\t// but by including this, if there's a problem with input validation it won't lead to UB.\n" \
        "\tthrow ([&]() {\n" \
        "\t\tstd::stringstream msg;\n" \
        '\t\tmsg << "Invalid day: Year " << year << " Day " << day;\n' \
        "\t\treturn std::out_of_range(msg.str());\n" \
        "\t\t}());\n"

    with open("source/run_day.cpp", "w") as file:
        file.write(HEADER)
        file.write("#include <chrono>\n")
        file.write("#include <stdexcept>\n")
        file.write("#include <sstream>\n")
        file.write("#include <optional>\n")
        file.write("#include <fmt/format.h>\n")
        file.write("#include \"days.h\"\n\n")
        file.write("std::optional<std::chrono::duration<double>> "
                   "run_day(int32_t year, int32_t day, std::string_view input_dir)\n")
        file.write("{\n")
        file.write("\tstd::string filename = ")
        file.write('fmt::format("{}/{}/day{:02d}.txt", input_dir, year, day);\n')
        file.write("\tswitch (year) {\n")
        for year in range(MIN_YEAR, MAX_YEAR + 1):
            file.write(f"\tcase {year}:\n")
            file.write("\t\tswitch (day) {\n")
            for day in range(1, 26):
                file.write(f"\t\tcase {day}:\n")
                file.write(f"\t\t\treturn run_{year}_day_{day:02}(filename);\n")
            file.write("\t\t}\n")
        file.write("\t}\n")
        file.write(exception_msg)
        file.write("}\n")

    with open("source/days.h", "w") as file:
        file.write(HEADER)
        file.write("#include <string>\n\n")
        for year in range(MIN_YEAR, MAX_YEAR + 1):
            for day in range(1, 26):
                file.write("std::optional<std::chrono::duration<float>> ")
                file.write(f"run_{year}_day_{day:02}(const std::string& filename);\n")


def generate_day(year: int, day: int):
    filename = f"source/{year}/day{day:02}.cpp"
    if os.path.exists(filename):
        return
    if not os.path.exists(f"source/{year}"):
        os.mkdir(f"source/{year}")
    with open("templates/day_template.cpp", "r") as file:
        contents = file.read()
    with open(filename, "w") as output:
        output.write(contents.format(year=year, day=day))


def main():
    generate_run_day()
    for year in range(MIN_YEAR, MAX_YEAR + 1):
        for day in range(1, 26):
            generate_day(year, day)


if __name__ != '__main__':
    raise ImportError(f"Module {__name__} cannot be imported.")
else:
    main()
